def request1():  # рекурсия созданная для обработки запроса пользователя на поиск информации из записей
    # (реализовал по 3 параметрам, в целом можно сделать по всем оставшимся)
    request = int(input(' ----------------------------------------------- \n What do you want to find? \n '
                        '1 : Surname \n 2 : Name \n 3 : Middle name \n 4 : Company phone \n '
                        '5 : Mobile phone \n ----------------------------------------------- \n'))
    # предлагается ввести запрос для поиска
    if request == 1:  # если пользователь осуществляет поиск через фамилию
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            surname = input('Write surname to search: ')  # ввод пользователем необходимой фамилии
            for line in file:  # цикл реализованный для поска строки содержащей нужную фамилию
                if surname in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит фамилию
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif request == 2:  # если пользователь решил вывести строку по имени
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            name = input('Write name to search: ')  # ввод пользователем необходимого имени
            for line in file:  # цикл реализованный для поска строки содержащей нужное имя
                if name in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит имя
            print(' ----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif request == 3:
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            middle_name = input('Write name to search: ')  # ввод пользователем необходимого отчества
            for line in file:  # цикл реализованный для поска строки содержащей нужное отчество
                if middle_name in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит отчество
            print(' ----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 \n '
                  'Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n -----------------------'
                  '------------------------')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif request == 4:  # если пользователь осуществляет поиск через компанию
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            company = input('Write surname to company: ')  # ввод пользователем необходимой компании
            for line in file:  # цикл реализованный для поска строки содержащей нужную компанию
                if company in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит компанию
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif request == 5:  # если пользователь осуществляет поиск через фамилию
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            company_phone = input('Write surname to company phone: ')  # ввод пользователем необходимого номера компании
            for line in file:  # цикл реализованный для поска строки содержащей нужный номер компании
                if company_phone in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит номер компании
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif request == 6:  # если пользователь осуществляет поиск через номер телефона
        with open('101.txt', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            mobile_phone = input('Write surname to mobile phone: ')  # ввод пользователем необходимого номера телефона
            for line in file:  # цикл реализованный для поска строки содержащей нужный номер телефона
                if mobile_phone in line:  # проверка выполняемости условия поска
                    print(line)  # вывод нужной строки которая содержит номер телефона
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы


def dict1():  # основная рекурсия для работы программы
    x = int(input())  # ввод пользователем необходимого параметра для поиска
    if x == 1:  # если пользователь выбрал вывести весь список контактов на экран
        with open('101.txt', 'r', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним
            print(file.read())  # вывод содержимого файла
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 '
                  '\n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n -----------------------'
                  '------------------------')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()  # возвращение к рекурсии основной части программы

    elif x == 2:  # если пользователь выбрал добавить новый контакт в книжку
        # Данная задача реализованна в едином в виде для дальнейшего визуально правильного эффекта
        # записи новой информации в записную книжку. Решил сделать каждый стоблец размеров в 20 символов
        # и расстояние между столбцами в 1 символ. Фича сделанна исключительно для
        # красивого визуального представления записей
        with open('101.txt', 'a+', encoding='utf-8') as file:  # открытие файла для дальнейшей работы с ним.
            # Важный момент состоит в том что файл открыт для добавления в него новой информации в конец записей.
            # В целом данную функцию можно реализовать для записей в определенную строку.
            # Что-то похожее написано в строке 122.
            # За тем лишь исключением, что в той операции реализованна замена строки.
            # В голове себе представляю как можно будет реализовать нужное действие.
            # Через цикл for с дальнейшей записей новых данных построчно.
            print('Enter new contact:')  # визуальный вывод действия для пользователя
            surname = input('Enter surname: ')  # для визуального представления пользователя о том что ему надо ввести
            # для поиска
            surname = list(surname)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае фамилия)
            for i in range(21 - len(surname)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                surname.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            name = input('Enter name: ')  # для визуального представления пользователя о том что ему надо ввести
            # для поиска
            name = list(name)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае имя)
            for i in range(21 - len(name)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                name.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            middle_name = input('Enter middle name: ')  # для визуального представления пользователя о том
            # что ему надо ввести для поиска
            middle_name = list(middle_name)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае отчество)
            for i in range(21 - len(middle_name)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                middle_name.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            company = input('Enter company: ')  # для визуального представления пользователя о том что ему надо ввести
            # для поиска
            company = list(company)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае компания)
            for i in range(21 - len(company)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                company.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            company_phone = input('Enter company phone: ')  # для визуального представления пользователя о том
            # что ему надо ввести для поиска
            company_phone = list(company_phone)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае телефон компании)
            for i in range(21 - len(company_phone)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                company_phone.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            mobile_phone = input('Enter mobile phone: ')  # для визуального представления пользователя о том
            # что ему надо ввести для поиска
            mobile_phone = list(mobile_phone)  # конвертация введенной информации в список для дальнейшего удобного
            # подгона всех слов под единый размер по количеству символов (в данном случае мобильный телефон)
            for i in range(21 - len(company_phone)):  # цикл необходимый для того
                # чтобы введеная информация была в количестве 21 символов
                mobile_phone.append(' ')  # добавление пробелов в конец слова для необходимого количества символов
            res = ''.join(surname+name+middle_name+company+company_phone+mobile_phone)
            # кульминация проделанных действий запись новой информации в новую строку, причем с конвертацией
            # полученного списка в строку без ковычек над каждым элементом строки
            file.write('\n')  # переход на новую строку для корректной записи информации
            file.write(res)  # запись новой строки в записную книжку, как говорил ранее информация буджет записана
            # в конец книжки
            print('----------------------------------------------- \n '
                  'Did you find everything you were looking for? \n If YES: press 0 \n '
                  'Else select what you want to do: \n'
                  ' 1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n ------------------------'
                  '-----------------------')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()   # возвращение к рекурсии основной части программы

    elif x == 3:  # заход в цикл если пользователь захотел изменить данные в строке
        with open('101.txt', 'r') as file:  # открытие файла для чтения
            par = input('Write parameter for search: ')  # ввод пользователем необходиой для него информации для поиска
            c = 0  # счетчик который необходим для определения нужной строки
            for line in file:  # цикл, который находит нужную для нас строку
                c += 1  # увеличение счетчика на 1 для обозначения одного прохода программы
                if par in line:  # если введенное слово находится в текущей строке
                    c -= 1  # уменьшаем количество строк на 1, в дальшейшем напишу для чего это надо
                    break  # остановка цикла
        with open('101.txt', 'r') as file:  # открытие файла для чтения, т.к
            # наше значение line уже стояло на следующей от нужной нас строки
            real_c = 0  # счетчик, который считает количество всех строк в книжке
            for line in file:  # цикл, который почситает количество строк в книжке
                if par not in line:  # данный if написан для обхода проблемы по неиспользованию line
                    real_c += 1  # подсчет строк
        if c != real_c:  # Условие если была найдена наша строка. Для этого и делалось 2 счетчика
            with open('101.txt', 'r') as file:  # открытие файла для чтения
                line = file.readlines()  # параметр читает все строки в файле для дальнейшей
                # корректной записи новой информации
                print(line[c])  # вывод пользователю строки которая подошла под условие поиска
                new_line = list(line[c])  # образование списка который состоит из данных нужной нам строки.
                # Сделал для того чтобы удобно было форматировать и добавлять нужную информацию
                new = int(input(' ----------------------------------------------- \n What do you want to change? \n '
                                '1 : Surname \n 2 : Name \n 3 : Middle name \n 4 : Company phone \n '
                                '5 : Mobile phone \n --------------'
                                '--------------------------------- \n'))  # ввод пользователем нужного действия
                if new == 1:  # если пользователь хочет изменить фамилию
                    surname = input('Write new surname: ')  # ввод пользователем новой фамилии
                    surname = list(surname)  # преобразование новой фамилии в список
                    # Сделал, чтобы подогнать новое слово под общий размер столбцов (20 символов)
                    for i in range(21 - len(surname)):  # цикл необходимый для добавления пробелов к новой ифнормации,
                        # чтобы она была размером ровно в 20 символов
                        surname.append(' ')  # добавление пробелов
                    new_line[0:21] = surname  # замена старой фамилии на новую
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
                if new == 2:  # если пользователь хочет изменить имя
                    name = input('Write new name: ')
                    name = list(name)  # преобразование нового имени в список
                    for i in range(21 - len(name)):  # цикл необходимый для добавления пробелов к новой ифнормации,
                        # чтобы она была размером ровно в 20 символов
                        name.append(' ')  # добавление пробелов
                    new_line[21:42] = name  # замена старого имени на новое
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
                if new == 3:  # если пользователь хочет изменить отчество
                    middle_name = input('Write new middle name: ')
                    middle_name = list(middle_name)  # преобразование нового отчества в список
                    for i in range(21 - len(middle_name)):  # цикл необходимый для добавления пробелов
                        # к новой ифнормации, чтобы она была размером ровно в 20 символов
                        middle_name.append(' ')  # добавление пробелов
                    new_line[42:63] = middle_name  # замена старого отчества на новое
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
                if new == 4:  # если пользователь хочет изменить компанию
                    company = input('Write new company: ')
                    company = list(company)  # преобразование новой компании в список
                    for i in range(21 - len(company)):  # цикл необходимый для добавления пробелов к новой ифнормации,
                        # чтобы она была размером ровно в 20 символов
                        company.append(' ')  # добавление пробелов
                    new_line[63:84] = company  # замена старой компании на новую
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
                if new == 5:  # если пользователь хочет изменить телефон компании
                    company_phone = input('Write new company phone: ')
                    company_phone = list(company_phone)  # преобразование нового номера компании в список
                    for i in range(21 - len(company_phone)):  # цикл необходимый для добавления пробелов
                        # к новой ифнормации, чтобы она была размером ровно в 20 символов
                        company_phone.append(' ')  # добавление пробелов
                    new_line[84:105] = company_phone  # замена старого номера компании на новый
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
                if new == 6:  # если пользователь хочет изменить мобильный телефон
                    mobile_phone = input('Write new mobile phone: ')
                    mobile_phone = list(mobile_phone)  # преобразование нового мобильного телефона в список
                    for i in range(21 - len(mobile_phone)):  # цикл необходимый для добавления пробелов
                        # к новой ифнормации, чтобы она была размером ровно в 20 символов
                        mobile_phone.append(' ')  # добавление пробелов
                    new_line[105:126] = mobile_phone  # замена старого мобильного телефона на новый
                    res = ''.join(new_line)  # удаление всех '' с целью красивого визуального представления
                    line[c] = res  # запись новой строки
            with open('101.txt', 'w') as file:  # открытие файла на запись
                file.writelines(line)  # запись строк в файл, причем позиция строк останется прежней
            print(' ----------------------------------------------- \n '
                  'Did you did everything you were looking for? \n'
                  ' ----------------------------------------------- '
                  '\n If YES: press 0 \n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()   # возвращение к рекурсии основной части программы

        if c == real_c:
            print('Error the program did not find anything')
            print(' ----------------------------------------------- \n '
                  'Did you did everything you were looking for? \n'
                  ' ----------------------------------------------- '
                  '\n If YES: press 0 \n Else select what you want to do: \n '
                  '1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n')  # вывод на экран способов
            # дальнейшего взаимодействия с программой
            return dict1()

    elif x == 4:  # заход в цикл если пользователь захотел посмотреть определенные данные в строке
        request1()  # вызов рекурсии поиска

    elif x == 0:  # заход в цикл если пользователь понял что приложение слишком крутое и решил выйти из него
        print('File was closed')  # визуальное представление закрытие файла


print('----------------------------------------------- \n '
      'Select what you want to do: \n 1 : View data \n 2 : Add note \n 3 : Edit note \n 4 : Find note \n 0 : Exit \n '
      '-----------------------------------------------')  # вывод на экран способов
# дальнейшего взаимодействия с программой
dict1()
